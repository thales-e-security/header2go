// Code generated by go-bindata.
// sources:
// translate/templates/defs.gotmpl
// translate/templates/main.gotmpl
// DO NOT EDIT!

package translate

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _translateTemplatesDefsGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x50\xc1\x4e\xc3\x30\x0c\xbd\xe7\x2b\x7c\x04\x09\x75\xfc\x02\x02\xd6\x1b\x9b\xd8\xc4\x05\x71\xb0\x3a\xb7\xaa\x68\xdc\x2a\x4d\x0e\x95\xe5\x7f\x47\x4d\x02\xcd\xa4\x71\x8a\xed\xbc\xe7\xf7\x9e\x27\x6c\xbe\xb1\x23\xb0\xd8\xb3\x31\x22\x0e\xb9\x23\xa8\xce\xcb\x44\xb3\xaa\xf1\xcb\x44\x20\x52\xd5\xe3\xc9\xbb\xd0\xf8\x37\xb4\xa4\x0a\x73\x6c\x40\x36\x42\x4d\x7e\xdf\xd3\x70\x99\x55\x13\x3e\x23\x45\xfa\x16\x98\xe0\x11\xaa\x27\xe7\x70\x79\x1e\x03\x7b\xd5\x4f\x91\xab\xfe\x4b\x84\xf8\xa2\x5a\xc0\x8f\x63\xcf\x9e\x5c\x06\x88\x44\x4f\x55\x3d\x46\xda\x5a\x27\x05\x11\x1a\x66\x2a\x01\xa5\xd3\xbc\xd6\xfc\xbe\x5b\xb5\x59\xdf\x07\x6e\xd6\xac\xa6\x0d\xdc\x5c\x99\xbf\x2b\xe3\x1d\xd1\xa1\xcd\xf1\x4e\xd8\xd2\x5f\xc0\xe8\xa9\x5b\xc5\x55\x1f\xf2\xfa\xfb\x14\x7c\xe5\xbd\x93\x0f\x8e\xd3\x77\x44\x97\xa3\x5b\x9e\x21\xef\x00\x31\x00\x00\xbb\x1d\x9c\x0f\x2f\x07\xe8\xed\x34\x90\x25\xf6\xa5\xc5\x9b\x2a\x91\xe6\xe2\xe0\x1f\xc1\x57\x3b\xf9\xe5\x03\x87\x50\x9c\x28\x9e\x24\x95\x3f\x01\x00\x00\xff\xff\x75\x30\xb0\x84\x15\x02\x00\x00")

func translateTemplatesDefsGotmplBytes() ([]byte, error) {
	return bindataRead(
		_translateTemplatesDefsGotmpl,
		"translate/templates/defs.gotmpl",
	)
}

func translateTemplatesDefsGotmpl() (*asset, error) {
	bytes, err := translateTemplatesDefsGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "translate/templates/defs.gotmpl", size: 533, mode: os.FileMode(436), modTime: time.Unix(1541497838, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _translateTemplatesMainGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x4d\x6f\xe3\x36\x10\x3d\x9b\xbf\x62\xea\x43\x21\x39\x1b\x65\x7b\x4d\xea\x43\x6a\x20\xb9\x2d\x16\xeb\x45\x7b\x08\x72\x20\xe4\x91\x41\xc4\x26\x5d\x8a\xce\x36\x25\xf8\xdf\x0b\x7e\x8a\x92\xa9\x0d\xba\x40\x9b\x4b\x64\x72\x3e\x38\xef\xcd\x3c\xf2\x44\xdb\x17\xba\x47\x38\x52\xc6\x09\xb9\x59\x11\xad\x25\xe5\x7b\x84\xe6\xeb\xdb\x09\x7b\x63\x88\xd6\xac\x03\x8e\xb0\x5c\xfa\xb5\x4f\xf4\x88\x70\x6d\x0c\xa8\xb7\x13\xee\xb0\x03\xad\x91\xef\xdc\x4a\xaf\xe4\xb9\x55\xa0\x75\x63\x8d\x8c\x01\x3d\x84\x7b\x44\xf5\xc0\xf0\xb0\xeb\x8d\x01\x70\x31\x9b\x3f\x68\xff\xbb\x60\xbb\xcf\x82\x71\x85\xd2\x98\x57\xc1\x76\xb0\xd2\x1a\x0f\x3d\x1a\xa3\xb5\x4b\xd7\x6c\x28\x17\x9c\xb5\xf4\x10\x63\xea\x26\x78\xf4\xd6\x08\xf9\xce\xd9\xfa\xdd\x78\xd8\x8f\xd0\xdc\x4b\x49\xdf\x36\xe2\xcc\x95\x31\x4f\x5a\x8f\x7e\x3f\x07\xbf\x3b\x12\x3e\x5c\xd8\x58\x5d\xb6\x4e\x56\x37\x84\x1d\x4f\x42\x2a\x58\x6e\x96\x44\xeb\x6b\xb0\x27\x0f\x07\x88\x10\x45\x8b\x33\xef\x69\x87\xcb\xe4\x3c\x54\x3f\x71\xb0\xd0\xd9\x8c\x8f\xc2\x9d\x6a\x48\x9c\x20\x24\x8b\x76\x47\x15\x05\x8b\x47\xb3\xd9\x8b\xad\x5b\xf7\x46\x64\xb1\x17\x6e\xf3\xe9\xd9\xc5\x18\xed\x19\x42\xba\x33\x6f\xa1\xa2\xce\xf5\x22\x43\x0d\xdb\x03\x6b\xb1\x3a\x20\x07\xc6\x55\x5d\x0a\x62\xd3\xb3\x0e\x68\x13\xf2\xfc\xb4\x06\xce\x0e\x76\x75\x21\x51\x9d\x25\x4f\x5b\x64\x61\x08\x59\x24\xc3\x35\x1c\xe9\x0b\x56\x85\x90\x1f\xe0\x80\xbc\x26\x8b\x4e\x48\x60\x70\xbb\x86\x8f\x77\xc0\xe0\x57\xbb\x7a\x07\xec\xea\xca\x05\x8f\x71\x9e\xd8\x33\xac\x2d\x3e\x1b\xc1\x5f\x51\xf6\x4c\xf0\x87\x33\x6f\x15\x13\xdc\x98\x6a\x55\x15\x30\xa9\x2b\x0f\x7e\x44\xba\x3a\x33\xae\x4e\x4a\x4e\x97\x69\xe3\x70\xad\x6b\xb8\x82\x68\xc2\xea\x55\xb0\xda\xb2\xbf\x51\x74\xd5\x2a\x59\xd5\xb5\xaf\x70\x5a\xb6\x21\xef\xc2\xfc\x4d\x32\x85\xbf\xd1\xf6\xa5\xaa\x6d\x71\xa9\x70\xdf\x11\x09\x32\x5b\xf7\xff\x5a\x91\x47\xf6\x4b\x11\xda\x8c\x00\x57\xb8\x29\xb4\x72\xec\x61\x5f\x7f\xeb\xc2\xa8\xaf\xe2\x82\xf1\xaa\x87\x42\x51\x50\x6a\x36\x00\x80\x80\xf0\xdc\xb6\xfd\x2b\x69\x89\xb3\xf7\x96\xb7\x5e\x56\xf0\x4f\xf8\x25\x0d\x5c\x98\xf7\xa8\x25\x17\x34\x69\x87\xca\xed\x8c\x20\x39\x5a\xbc\x08\x4d\xb9\x09\xb8\xf4\x8d\xd6\xcd\x96\x76\x98\xc9\xcf\x45\x98\x3a\x8a\x4c\x26\x6d\xee\x1c\xf7\xdf\xa8\xc4\x81\x08\x8b\xd9\x38\x5e\xf4\xfc\x90\x61\xe0\xf9\xb0\xdf\xdf\xe1\xe7\x13\xe2\x8e\xf1\x7d\x1e\x7b\x4c\xd8\x83\x14\xc7\x19\xca\x1e\x2f\x19\x9b\x94\x1f\x38\x29\xf3\x91\x04\x78\x4c\x81\xab\x2c\x52\xd5\x64\xc3\x41\xb2\xb2\xd2\x55\x32\x69\x89\x72\xfe\xef\xf4\xc4\x00\x61\xe0\xf6\xfd\x23\xb9\x4e\x98\x5e\x3e\xe5\x31\x19\x39\xfe\x08\x47\xa9\x0b\xcb\x83\x14\x7a\x35\x2f\xd9\x79\x4c\x6e\x31\x2b\x3e\x85\x9b\xad\xdc\xb1\x50\x49\xec\xe7\xcd\x2f\x48\x77\xa7\x9f\x8a\x56\x06\xbc\xc4\x3e\xc9\xb4\x4f\x58\x14\x14\xa7\x24\x1e\x88\x81\xd2\x22\x26\xd6\xcb\xc1\x71\x73\x83\x7f\xb9\xfb\x34\xdd\xea\x1e\xa1\xe1\x59\x51\xe5\xac\x7f\xa6\x92\x1e\x7b\x7f\x83\x0f\xb4\xcf\x4c\xf4\x58\x3b\x33\xb6\xf3\x27\x45\x11\xc0\xc8\x72\xf8\x5f\x87\x04\x8f\xa8\xbe\xb8\x9a\xac\x8f\x3f\xc4\x68\xa9\x18\x2b\x76\x48\x9a\xa3\x6b\xb8\xac\x67\x56\xcc\x9c\xcf\x2b\x95\xee\x25\x64\x8d\xef\xfb\x7b\xb9\x37\x06\x56\xb3\x32\xe7\x5c\x58\x37\x81\x28\x5d\xeb\x43\xe3\x8e\x03\xae\xe1\xe7\xff\x4c\x39\xff\x8d\x6e\x86\x06\xba\x50\x8a\xb0\x13\x5f\x65\x13\x2e\x6c\xbf\xdf\xae\x07\xac\x87\x91\x9d\xed\x9f\xbc\xfa\xc4\x74\x91\xe8\x1f\x26\x6e\x92\x25\x57\xc2\x42\x69\xd9\xad\xf8\x6e\x57\xd9\x01\xaf\x93\xf8\xb8\xd1\x0a\x33\xe6\xc6\xc7\xbe\xf0\xed\x53\xc4\xfc\x13\x00\x00\xff\xff\xd2\xb6\x54\x78\xf3\x0b\x00\x00")

func translateTemplatesMainGotmplBytes() ([]byte, error) {
	return bindataRead(
		_translateTemplatesMainGotmpl,
		"translate/templates/main.gotmpl",
	)
}

func translateTemplatesMainGotmpl() (*asset, error) {
	bytes, err := translateTemplatesMainGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "translate/templates/main.gotmpl", size: 3059, mode: os.FileMode(436), modTime: time.Unix(1541668902, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"translate/templates/defs.gotmpl": translateTemplatesDefsGotmpl,
	"translate/templates/main.gotmpl": translateTemplatesMainGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"translate": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"defs.gotmpl": &bintree{translateTemplatesDefsGotmpl, map[string]*bintree{}},
			"main.gotmpl": &bintree{translateTemplatesMainGotmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

