// Code generated by go-bindata.
// sources:
// translate/templates/defs.gotmpl
// translate/templates/main.gotmpl
// DO NOT EDIT!

package translate

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _translateTemplatesDefsGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xcf\x4e\xc3\x30\x0c\x87\xef\x79\x0a\x1f\x41\x42\x1d\xaf\x30\x01\xeb\x8d\x21\x36\x71\x41\x1c\xac\xce\xad\x2a\x1a\x37\x4a\x93\x43\x65\xf9\xdd\x51\xd3\xb0\x76\xa8\xdc\x12\xff\xf9\x7d\x9f\xec\xb0\xfa\xc6\x86\xc0\x62\xcb\xc6\x88\x78\xe4\x86\xa0\x38\x8f\x8e\x06\x55\x13\x46\x47\x20\x52\x94\xfd\x29\xf8\x58\x85\x57\xb4\xa4\x0a\x43\xfa\x80\x2c\x0b\x25\x85\x43\x4b\xdd\x65\x50\x9d\xe7\xf3\xa4\x48\x5b\x03\x13\x3c\x42\xb1\xf7\x1e\xc7\xa7\x3e\x72\x50\xfd\x14\xb9\xf9\x7f\x89\x10\x5f\x54\x45\x12\xfa\x0f\xcf\xe4\xae\x59\x5e\x0b\xf9\x10\xb9\x9a\x54\x4d\x1d\xb9\xba\x61\xdf\xad\xed\xde\xd0\xa3\xcd\x76\x27\xac\xe9\xea\x57\x94\xfd\xde\x37\x13\x55\xf5\x21\xc7\xdf\xcf\xde\xd3\xde\x3b\x85\xe8\x79\x6e\xa7\xe9\x75\x69\x4b\x16\x72\x06\x88\x01\x00\xd8\xed\xe0\x7c\x7c\x3e\x42\x6b\x5d\x47\x96\x38\xac\x15\x37\x29\x69\xcd\xa7\xc2\x3f\xc0\x17\xeb\xc2\xf8\x81\x5d\x4c\x11\xbf\xa7\xb9\xde\xe6\x27\x00\x00\xff\xff\xa2\x56\x5d\x86\xd4\x01\x00\x00")

func translateTemplatesDefsGotmplBytes() ([]byte, error) {
	return bindataRead(
		_translateTemplatesDefsGotmpl,
		"translate/templates/defs.gotmpl",
	)
}

func translateTemplatesDefsGotmpl() (*asset, error) {
	bytes, err := translateTemplatesDefsGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "translate/templates/defs.gotmpl", size: 468, mode: os.FileMode(436), modTime: time.Unix(1540479577, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _translateTemplatesMainGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\xbb\x6e\x1b\x3b\x10\xad\xc5\xaf\x98\xab\xe2\x62\x57\xb6\x57\xbe\xad\x7c\x55\x28\x02\xac\xce\x30\x2c\x23\x29\x0c\x17\xc4\x8a\x2b\x10\x96\xb8\x0a\x97\xb2\xe3\x10\xfc\xf7\x80\xc3\xc7\x3e\x44\xd9\x48\x8a\xa4\x89\x4c\xce\x9c\xe1\x39\xf3\xda\x03\x2d\x5f\xe8\x96\xc1\x9e\x72\x41\xc8\x74\x42\xb4\x96\x54\x6c\x19\x14\x8f\xef\x07\xd6\x18\x43\xb4\xe6\x15\x08\x06\xe3\xb1\x3b\xbb\xa3\x7b\x06\x57\xc6\x80\x7a\x3f\xb0\x0d\xab\x40\x6b\x26\x36\x78\xd2\x28\x79\x2c\x15\x68\x5d\x58\x23\x63\x40\xb7\x70\x2b\xa6\x6e\x39\xdb\x6d\x1a\x63\xc0\x5a\x58\xa8\x62\x49\x45\x2d\x78\x49\x77\xc1\x3e\x78\x86\xa0\xd7\x50\x2c\xa4\xa4\xef\xcb\xfa\x28\x94\x31\x4f\x5a\xf7\xfe\x7e\xc6\xd8\xc6\xdc\x10\xff\xc3\x04\x68\x07\x13\xcf\xc9\x64\x4a\xf8\xfe\x50\x4b\x05\xe3\xe5\x98\x68\x7d\x05\xbc\x82\xe2\xbe\xe6\x42\x31\x19\xa8\x06\x8b\xa3\x68\x68\xc5\xc6\xd1\xb9\x65\x31\x70\xb0\x12\xd8\x88\xab\x1a\x5f\xd5\x06\x8e\x52\x90\x51\xb9\xa1\x8a\x02\x4c\xb4\x2e\x96\xdb\x7a\x8d\xe7\xce\x88\x8c\xb6\x35\x5e\x3e\x3d\x23\x46\xef\xce\x10\x52\x1d\x45\x09\x19\x45\xd7\x93\x08\x39\xac\x77\xbc\x64\xd9\x8e\x09\xe0\x42\xe5\x29\x10\x1b\x9e\x57\x40\x0b\x1f\xe7\x9f\x39\x08\xbe\xb3\xa7\x23\xc9\xd4\x51\x8a\x78\x45\x46\x86\x90\x51\x34\x9c\xc3\x9e\xbe\xb0\x2c\x01\x79\x09\x3b\x26\x72\x32\xaa\x6a\x09\x1c\x66\x73\xb8\xbe\x01\x0e\xff\xdb\xd3\x1b\xe0\x17\x17\x08\x1e\x70\x9e\xf8\x33\xcc\xad\x3e\xcb\x5a\xbc\x32\xd9\xf0\x5a\xdc\x1e\x45\xa9\x78\x2d\x8c\xc9\x26\x59\x42\x93\x3c\x73\xe2\x07\xa5\xb3\x23\x17\xea\xa0\xe4\xf0\x98\x16\xa8\x6b\x9e\xc3\x05\x04\x13\x9e\x4f\xbc\xd5\x9a\xff\x64\x75\x95\x4d\xa2\x55\x9e\x3b\x86\x43\xda\x86\x7c\x2a\xf3\x9b\xe4\x8a\x7d\xa1\xe5\x4b\x96\x5b\x72\x91\xb8\xab\x88\x28\x99\xe5\xfd\x57\x19\x39\x65\x1f\x92\xd2\x76\x12\x80\xc4\x4d\xa2\x94\x43\x0d\x3b\xfe\x25\xc2\xa8\xc7\xfa\x24\xe3\x59\x03\x09\x52\x90\x2a\x36\x00\x00\xaf\xf0\xb9\x6b\xfb\x2f\x35\x13\xd0\xde\x59\xce\x20\x74\xf9\xe2\x8d\x4a\xd6\x12\xb4\x6f\x29\xb4\x2e\xd6\xb4\x0a\xd9\xb9\xec\x80\x3a\x82\xf6\xf7\x07\x84\xef\x18\xdb\x70\xb1\xed\x82\xf6\x15\xb8\x95\xf5\xfe\x8c\x06\xab\x53\x09\x06\xb2\x9c\x68\x90\xbe\xff\x40\x84\x96\xdb\x2c\x4e\xc9\x74\x8e\x51\x8a\xa0\xd9\x6f\x09\x11\x4b\x3c\x9d\x7e\x8c\xd9\xe7\x8a\x1e\x83\xd9\x6b\x5b\x26\x31\x8f\xfd\x60\x1f\x96\x4b\x26\x59\x73\xde\xfc\x44\x59\x7c\xfd\xb0\xd5\x3a\xea\x49\xd6\xc4\xe1\xe2\x02\x26\xdb\x00\xeb\xdf\x09\xd1\xe6\x25\xa9\x89\xf5\x42\x39\xa6\x53\xf6\x03\xb7\x40\xdc\x45\x4e\xa1\x76\xa9\x65\xdd\xd4\xdd\x53\x49\xf7\x8d\xdb\x3b\x6d\xee\x00\xf7\x57\xf1\x8d\x36\x5f\x6b\xbe\xf1\x1d\x6e\x4c\xbf\xe3\xb5\x66\xbb\x06\x77\x5d\x38\x71\x25\x90\x12\xd0\x3f\xf8\xd2\xff\x9f\xfb\x00\x2b\xa6\x1e\x90\x93\xf5\x71\x8f\xe8\x1d\x25\xb1\x42\x85\x78\x39\xed\x2e\x3c\xe5\x83\xf8\xec\x3b\xfc\x17\x77\x9e\xcf\x19\xfa\xbc\x52\x69\x63\xa1\xf1\xa2\x59\xc8\xad\x31\x38\x3e\x7d\x32\x07\x33\x14\x5d\x78\x35\x90\x28\x2e\xa3\xb6\x70\xfb\x80\x73\xf8\xf7\x2c\xa4\xc6\x29\x38\x3b\xa3\x73\x36\x39\x57\x87\x99\xe7\xde\x7b\x4a\x1a\x24\x0f\x9f\x14\xbe\x80\x48\xa7\xb9\xba\x3d\x16\xbe\x25\x06\xb9\xb0\xf5\x3e\x9b\xb7\x5a\xb7\xbd\x7a\xb6\x7e\xba\xec\x63\xa6\x93\x89\xfe\xe3\xc4\x0d\xa2\x14\x9d\xe5\x96\xa0\xd6\x99\xe5\x9f\x56\x95\x6d\xf0\x3c\x0e\x1f\x6c\x2d\xdf\x63\xd8\x3e\xf6\xfb\xd2\x2e\x50\xf3\x2b\x00\x00\xff\xff\xfd\x57\xf4\x6b\x71\x0a\x00\x00")

func translateTemplatesMainGotmplBytes() ([]byte, error) {
	return bindataRead(
		_translateTemplatesMainGotmpl,
		"translate/templates/main.gotmpl",
	)
}

func translateTemplatesMainGotmpl() (*asset, error) {
	bytes, err := translateTemplatesMainGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "translate/templates/main.gotmpl", size: 2673, mode: os.FileMode(436), modTime: time.Unix(1540824750, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"translate/templates/defs.gotmpl": translateTemplatesDefsGotmpl,
	"translate/templates/main.gotmpl": translateTemplatesMainGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"translate": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"defs.gotmpl": &bintree{translateTemplatesDefsGotmpl, map[string]*bintree{}},
			"main.gotmpl": &bintree{translateTemplatesMainGotmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

