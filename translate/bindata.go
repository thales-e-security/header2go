// Code generated by go-bindata.
// sources:
// translate/templates/defs.gotmpl
// translate/templates/main.gotmpl
// DO NOT EDIT!

package translate

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _translateTemplatesDefsGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x50\xc1\x4e\xc3\x30\x0c\xbd\xe7\x2b\x7c\x04\x09\x75\xfc\x02\x02\xd6\x1b\x9b\xd8\xc4\x05\x71\xb0\x3a\xb7\xaa\x68\xdc\x2a\x4d\x0e\x95\xe5\x7f\x47\x4d\x02\xcd\xa4\x71\x8a\xed\xbc\xe7\xf7\x9e\x27\x6c\xbe\xb1\x23\xb0\xd8\xb3\x31\x22\x0e\xb9\x23\xa8\xce\xcb\x44\xb3\xaa\xf1\xcb\x44\x20\x52\xd5\xe3\xc9\xbb\xd0\xf8\x37\xb4\xa4\x0a\x73\x6c\x40\x36\x42\x4d\x7e\xdf\xd3\x70\x99\x55\x13\x3e\x23\x45\xfa\x16\x98\xe0\x11\xaa\x27\xe7\x70\x79\x1e\x03\x7b\xd5\x4f\x91\xab\xfe\x4b\x84\xf8\xa2\x5a\xc0\x8f\x63\xcf\x9e\x5c\x06\x88\x44\x4f\x55\x3d\x46\xda\x5a\x27\x05\x11\x1a\x66\x2a\x01\xa5\xd3\xbc\xd6\xfc\xbe\x5b\xb5\x59\xdf\x07\x6e\xd6\xac\xa6\x0d\xdc\x5c\x99\xbf\x2b\xe3\x1d\xd1\xa1\xcd\xf1\x4e\xd8\xd2\x5f\xc0\xe8\xa9\x5b\xc5\x55\x1f\xf2\xfa\xfb\x14\x7c\xe5\xbd\x93\x0f\x8e\xd3\x77\x44\x97\xa3\x5b\x9e\x21\xef\x00\x31\x00\x00\xbb\x1d\x9c\x0f\x2f\x07\xe8\xed\x34\x90\x25\xf6\xa5\xc5\x9b\x2a\x91\xe6\xe2\xe0\x1f\xc1\x57\x3b\xf9\xe5\x03\x87\x50\x9c\x28\x9e\x24\x95\x3f\x01\x00\x00\xff\xff\x75\x30\xb0\x84\x15\x02\x00\x00")

func translateTemplatesDefsGotmplBytes() ([]byte, error) {
	return bindataRead(
		_translateTemplatesDefsGotmpl,
		"translate/templates/defs.gotmpl",
	)
}

func translateTemplatesDefsGotmpl() (*asset, error) {
	bytes, err := translateTemplatesDefsGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "translate/templates/defs.gotmpl", size: 533, mode: os.FileMode(436), modTime: time.Unix(1541497838, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _translateTemplatesMainGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\xbb\x6e\x1b\x3b\x10\xad\xc5\xaf\x98\xab\xe2\x62\x57\xb6\x57\xbe\xad\x7c\x55\x28\x02\xac\xce\x30\x2c\x23\x29\x0c\x17\xc4\x6a\x56\x20\x2c\x71\x15\x2e\x65\xc7\x21\xf8\xef\x01\x9f\xfb\x10\x65\x23\x29\x92\x26\x32\x39\x0f\x9e\x33\x73\x66\xf6\x40\xcb\x17\xba\x45\xd8\x53\xc6\x09\x99\x4e\x88\x52\x82\xf2\x2d\x42\xf1\xf8\x7e\xc0\x46\x6b\xa2\x14\xab\x80\x23\x8c\xc7\xee\xec\x8e\xee\x11\xae\xb4\x06\xf9\x7e\xc0\x0d\x56\xa0\x14\xf2\x8d\x3d\x69\xa4\x38\x96\x12\x94\x2a\x8c\x91\xd6\xa0\xda\x70\x2b\x94\xb7\x0c\x77\x9b\x46\x6b\x30\x16\x26\x54\xb1\xa4\xbc\xe6\xac\xa4\xbb\x60\xaf\x8a\xfb\x9a\x71\x89\xa2\xd1\x3a\x86\x09\x2f\xb8\x86\x62\x21\x04\x7d\x5f\xd6\x47\x2e\xb5\x7e\x52\xaa\xf7\xf7\xb3\x7d\x88\xd6\x37\xc4\xff\xd0\x21\x8f\x0b\x13\xcf\xc9\x64\x4a\xd8\xfe\x50\x0b\x09\xe3\xe5\x98\x28\x75\x05\xac\x82\x90\x39\xe0\x0e\x16\x47\xde\xd0\x0a\xc7\xd1\xb9\x85\x34\x70\x30\x7c\x98\x8c\xab\xda\xbe\xaa\x4d\x1c\x79\x21\xa3\x72\x43\x25\x05\x98\x28\x55\x2c\xb7\xf5\xda\x9e\x3b\x23\x32\xda\xd6\xf6\xf2\xe9\xd9\xc6\xe8\xdd\x69\x42\xaa\x23\x2f\x21\xa3\xd6\xf5\x24\x43\x0e\xeb\x1d\x2b\x31\xdb\x21\x07\xc6\x65\x9e\x0a\x62\xd2\xb3\x0a\x68\xe1\xf3\xfc\x33\x07\xce\x76\xe6\x74\x24\x50\x1e\x05\x8f\x57\x64\xa4\x09\x19\x45\xc3\x39\xec\xe9\x0b\x66\x89\x90\x97\xb0\x43\x9e\x93\x51\x55\x0b\x60\x30\x9b\xc3\xf5\x0d\x30\xf8\xdf\x9c\xde\x00\xbb\xb8\xb0\xc1\x43\x9c\x27\xf6\x0c\x73\xc3\xcf\xb2\xe6\xaf\x28\x1a\x56\xf3\xdb\x23\x2f\x25\xab\xb9\xd6\xd9\x24\x4b\x70\x92\x67\x8e\xfc\xc0\x74\x76\x64\x5c\x1e\xa4\x18\x1e\xd3\xc2\xf2\x9a\xe7\x70\x01\xc1\x84\xe5\x13\x6f\xb5\x66\x3f\xb1\xae\xb2\x49\xb4\xca\x73\x87\x70\x08\x5b\x93\x4f\x69\x7e\x13\x4c\xe2\x17\x5a\xbe\x64\xb9\x01\x17\x81\xbb\x8e\x88\x94\x19\xdc\x7f\x15\x91\x63\xf6\x21\x49\x6d\xa7\x00\x16\xb8\x4e\xb4\x72\xe8\x61\x87\xbf\xb4\x61\xe4\x63\x7d\x52\xf1\xac\x81\x04\x28\x48\x35\x1b\x00\x80\x67\xf8\xdc\xb5\xf9\x97\x1a\x10\xd6\xde\x59\xce\xc0\xaa\x1f\xbf\xc3\x7f\x51\x70\x5e\xef\x61\x88\x9c\x94\x49\x59\x56\x66\xd0\x14\x4a\x15\x6b\x5a\xf9\x63\xad\x14\xee\x1a\x3b\x4f\xdc\xdc\x58\xbc\x51\x81\x2d\x65\x06\x5d\xdf\x23\xf7\x44\x5d\x76\x5e\xeb\x98\x33\xbf\x3f\x60\xf2\x0e\x71\xc3\xf8\xb6\x1b\xbb\x4f\xed\xad\xa8\xf7\x67\xc8\x5d\x9d\x72\x3b\xe0\xfb\x84\xdc\xf4\xfd\x07\xec\xb6\x10\x67\x71\x16\xa7\x9b\xc7\x32\x12\x8a\x91\xff\x0e\x11\xb1\x28\xe9\xbe\xf2\xa5\xeb\xbe\xdb\x7a\x0c\x86\xba\xd1\x62\x62\xd0\xfb\xf5\x31\xec\xc3\x4c\x60\x73\xde\xfc\x84\x59\xfb\xfa\xa1\x86\x3b\xec\x09\x6c\xe2\xd4\x72\x09\x93\xfa\xb2\xc2\x72\x44\xb4\x75\x49\x72\x62\xbc\x2c\x1d\xd3\x29\xfe\xb0\xeb\x25\x2e\x39\xc7\x50\xbb\x3a\xb3\x6e\xe9\xee\xa9\xa0\xfb\xc6\x2d\xb4\xb6\x76\x4e\x1a\xc5\x37\xda\x7c\xad\xd9\xc6\x8b\x43\xeb\xfe\x28\xe9\x34\x7d\x6f\xb5\xa6\x08\x0c\xed\xee\xff\xcf\x7d\x82\x15\xca\x07\x8b\xc9\xf8\xb8\x47\xf4\x8e\x92\xb1\x42\x87\x78\x3a\xcd\x92\x3d\xc5\x73\x56\xdb\xd6\xe7\x95\x0a\xfb\x45\x60\x8c\x17\xcd\x42\x6c\xb5\xb6\x73\x39\xad\x7a\xeb\xc2\xaa\x01\x45\x71\xcb\xb5\x8d\xdb\x0f\x38\x87\x7f\x3f\x1d\x24\x69\x9e\xb3\xc9\xb9\x3e\xcc\x3c\xf6\xde\x53\xd2\x41\xc2\x88\x09\x4a\x22\x1d\x71\x75\x35\x16\x3e\x52\x06\xb5\x30\xfd\x3e\x9b\xb7\x5c\xb7\x5a\x3d\xdb\x3f\x5d\xf4\xb1\xd2\xc9\x42\xff\x71\xe1\x06\x59\x8a\xce\xd6\x4c\x40\xeb\x2c\x89\x4f\xbb\xca\x08\x3c\x8f\xc3\xc7\x4a\xcb\x6b\xcc\xca\xc7\x7c\xc5\x9a\xcd\xac\x7f\x05\x00\x00\xff\xff\x16\x06\x00\x70\xd7\x0a\x00\x00")

func translateTemplatesMainGotmplBytes() ([]byte, error) {
	return bindataRead(
		_translateTemplatesMainGotmpl,
		"translate/templates/main.gotmpl",
	)
}

func translateTemplatesMainGotmpl() (*asset, error) {
	bytes, err := translateTemplatesMainGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "translate/templates/main.gotmpl", size: 2775, mode: os.FileMode(436), modTime: time.Unix(1541497485, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"translate/templates/defs.gotmpl": translateTemplatesDefsGotmpl,
	"translate/templates/main.gotmpl": translateTemplatesMainGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"translate": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"defs.gotmpl": &bintree{translateTemplatesDefsGotmpl, map[string]*bintree{}},
			"main.gotmpl": &bintree{translateTemplatesMainGotmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

