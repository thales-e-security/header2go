// Code generated by go-bindata.
// sources:
// translate/templates/defs.gotmpl
// translate/templates/main.gotmpl
// DO NOT EDIT!

package translate

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _translateTemplatesDefsGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xcf\x4e\xc3\x30\x0c\x87\xef\x79\x0a\x1f\x41\x42\x1d\xaf\x30\x01\xeb\x8d\x21\x36\x71\x41\x1c\xac\xce\xad\x2a\x1a\x37\x4a\x93\x43\x65\xf9\xdd\x51\xd3\xb0\x76\xa8\xdc\x12\xff\xf9\x7d\x9f\xec\xb0\xfa\xc6\x86\xc0\x62\xcb\xc6\x88\x78\xe4\x86\xa0\x38\x8f\x8e\x06\x55\x13\x46\x47\x20\x52\x94\xfd\x29\xf8\x58\x85\x57\xb4\xa4\x0a\x43\xfa\x80\x2c\x0b\x25\x85\x43\x4b\xdd\x65\x50\x9d\xe7\xf3\xa4\x48\x5b\x03\x13\x3c\x42\xb1\xf7\x1e\xc7\xa7\x3e\x72\x50\xfd\x14\xb9\xf9\x7f\x89\x10\x5f\x54\x45\x12\xfa\x0f\xcf\xe4\xae\x59\x5e\x0b\xf9\x10\xb9\x9a\x54\x4d\x1d\xb9\xba\x61\xdf\xad\xed\xde\xd0\xa3\xcd\x76\x27\xac\xe9\xea\x57\x94\xfd\xde\x37\x13\x55\xf5\x21\xc7\xdf\xcf\xde\xd3\xde\x3b\x85\xe8\x79\x6e\xa7\xe9\x75\x69\x4b\x16\x72\x06\x88\x01\x00\xd8\xed\xe0\x7c\x7c\x3e\x42\x6b\x5d\x47\x96\x38\xac\x15\x37\x29\x69\xcd\xa7\xc2\x3f\xc0\x17\xeb\xc2\xf8\x81\x5d\x4c\x11\xbf\xa7\xb9\xde\xe6\x27\x00\x00\xff\xff\xa2\x56\x5d\x86\xd4\x01\x00\x00")

func translateTemplatesDefsGotmplBytes() ([]byte, error) {
	return bindataRead(
		_translateTemplatesDefsGotmpl,
		"translate/templates/defs.gotmpl",
	)
}

func translateTemplatesDefsGotmpl() (*asset, error) {
	bytes, err := translateTemplatesDefsGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "translate/templates/defs.gotmpl", size: 468, mode: os.FileMode(436), modTime: time.Unix(1540479577, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _translateTemplatesMainGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x4d\x4f\x1b\x31\x10\x3d\xc7\xbf\x62\x9a\x43\xb5\x1b\x60\x43\xaf\xa1\x39\xa4\x91\xc8\x0d\x21\xc2\x0d\x71\xb0\x36\xde\xc8\x22\xb1\x53\xaf\x03\xa5\x96\xff\x7b\xe5\xf1\xda\xfb\x11\x07\xd4\x1e\xca\x29\x6b\x8f\xdf\xf8\xbd\x79\x9e\xe1\x40\xcb\x17\xba\x65\xb0\xa7\x5c\x10\x32\x9d\x10\x63\x14\x15\x5b\x06\xc5\xe3\xfb\x81\xd5\xd6\x12\x63\x78\x05\x82\xc1\x78\xec\xd7\xee\xe8\x9e\xc1\x95\xb5\xa0\xdf\x0f\x6c\xc3\x2a\x30\x86\x89\x0d\xae\xd4\x5a\x1d\x4b\x0d\xc6\x14\x2e\xc8\x5a\x30\x2d\xdc\x8a\xe9\x5b\xce\x76\x9b\xda\x5a\x70\x11\x0e\xaa\x58\x52\x21\x05\x2f\xe9\x2e\xc4\x87\x93\x21\xe9\x35\x14\x0b\xa5\xe8\xfb\x52\x1e\x85\xb6\xf6\xc9\x98\xde\xf7\x33\xe6\xb6\xf6\x86\x34\x3f\x6c\x80\xf6\x30\x71\x9d\x4c\xa6\x84\xef\x0f\x52\x69\x18\x2f\xc7\xc4\x98\x2b\xe0\x15\x14\xf7\x92\x0b\xcd\x54\xa0\x1a\x22\x8e\xa2\xa6\x15\x1b\xc7\xc3\x2d\x8b\xc1\x01\x27\x81\xcb\xb8\x92\x78\xab\x36\x71\x94\x82\x8c\xca\x0d\xd5\x14\x60\x62\x4c\xb1\xdc\xca\x35\xae\xfb\x20\x32\xda\x4a\xdc\x7c\x7a\x46\x8c\xde\x9e\x25\xa4\x3a\x8a\x12\x32\x8a\x47\x4f\x32\xe4\xb0\xde\xf1\x92\x65\x3b\x26\x80\x0b\x9d\xa7\x40\x5c\x7a\x5e\x01\x2d\x9a\x3c\x5f\xe6\x20\xf8\xce\xad\x8e\x14\xd3\x47\x25\xe2\x16\x19\x59\x42\x46\x31\x70\x0e\x7b\xfa\xc2\xb2\x04\xe4\x25\xec\x98\xc8\xc9\xa8\x92\x0a\x38\xcc\xe6\x70\x7d\x03\x1c\xbe\xbb\xd5\x1b\xe0\x17\x17\x08\x1e\x70\x9e\xf8\x33\xcc\x9d\x3e\x4b\x29\x5e\x99\xaa\xb9\x14\xb7\x47\x51\x6a\x2e\x85\xb5\xd9\x24\x4b\x68\x92\x67\x5e\xfc\xa0\x74\x76\xe4\x42\x1f\xb4\x1a\x2e\xd3\x02\x75\xcd\x73\xb8\x80\x10\xc2\xf3\x49\x13\xb5\xe6\xbf\x99\xac\xb2\x49\x8c\xca\x73\xcf\x70\x48\xdb\x92\x4f\x65\x7e\x53\x5c\xb3\x1f\xb4\x7c\xc9\x72\x47\x2e\x12\xf7\x8e\x88\x92\x39\xde\xff\x95\x91\x57\xf6\x21\x29\x6d\xa7\x00\x48\xdc\x26\xac\x1c\x3c\xec\xf9\x97\x08\xa3\x1f\xe5\x49\xc5\xb3\x1a\x12\xa4\x20\x65\x36\x00\x80\x46\xe1\x73\xdb\xee\x2f\xd5\x13\x30\xde\x47\xce\x20\xbc\xf2\xc5\x1b\x55\xac\x25\xe8\xee\x52\x18\x53\xac\x69\x15\xaa\x73\xd9\x01\xf5\x04\xdd\xef\x0f\x08\xdf\x31\xb6\xe1\x62\xdb\x05\xed\x2b\x70\xab\xe4\xfe\x8c\x06\xab\x53\x09\x06\xb2\x9c\x68\x90\xde\xff\x40\x84\x96\xdb\x2c\x76\xc9\x74\x8d\x51\x8a\xa0\xd9\x5f\x09\x11\x2d\x9e\x2e\x3f\xe6\xec\x73\xc5\x13\x83\xde\xeb\x9e\x4c\xa2\x1f\x37\x8d\x7d\x68\x97\x4c\xb1\xfa\x7c\xf8\x89\xb2\x78\xfb\xe1\x53\xeb\xa8\xa7\x58\x1d\x9b\x8b\x4f\x98\x7c\x06\xe8\x7f\x2f\x44\x5b\x97\xa4\x26\xee\x14\xca\x31\x9d\xb2\x5f\x38\x05\xe2\x2c\xf2\x0a\xb5\x43\x2d\xeb\x96\xee\x9e\x2a\xba\xaf\xfd\xdc\x69\x6b\xe7\xbe\x9a\x77\xed\xcb\x9a\x12\xe5\xb2\xb9\x85\x33\x92\x1b\x46\x2b\xa6\x1f\xf0\x82\x2e\xd8\x63\xf4\x96\x92\x20\xa1\xdc\x8d\x36\x6e\xb0\x9d\x5e\x0e\xf1\xd9\x4f\xf8\x16\x07\x58\x53\x00\x3c\xf3\x4a\x15\xde\xd7\x05\x2f\xea\x85\xda\x5a\x8b\xbd\xb0\xa9\xcc\xa0\x21\xe2\x11\x5e\x0d\xf8\xc6\xc9\xd2\xba\xb0\x0f\x38\x87\xaf\x67\x21\x0d\xb6\xb4\x59\x1f\x32\x18\x98\x74\x3c\xdd\xb5\x76\x18\xe1\x03\xd5\x9c\xcd\x66\xf3\x56\x95\xf6\x89\x9c\x2d\x5b\xf7\x9e\xb1\x26\xc9\x92\xfc\xb3\xc4\x83\x2c\x45\x67\xa6\x24\xa8\x75\x5a\xe8\xa7\xf5\x77\xef\x2a\x8f\x6f\x1e\x1d\xdd\x58\x1b\x5d\xeb\xfe\xad\x73\x73\xcb\xfe\x09\x00\x00\xff\xff\xda\x19\xef\xca\xe8\x09\x00\x00")

func translateTemplatesMainGotmplBytes() ([]byte, error) {
	return bindataRead(
		_translateTemplatesMainGotmpl,
		"translate/templates/main.gotmpl",
	)
}

func translateTemplatesMainGotmpl() (*asset, error) {
	bytes, err := translateTemplatesMainGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "translate/templates/main.gotmpl", size: 2536, mode: os.FileMode(436), modTime: time.Unix(1540479434, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"translate/templates/defs.gotmpl": translateTemplatesDefsGotmpl,
	"translate/templates/main.gotmpl": translateTemplatesMainGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"translate": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"defs.gotmpl": &bintree{translateTemplatesDefsGotmpl, map[string]*bintree{}},
			"main.gotmpl": &bintree{translateTemplatesMainGotmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

