// Code generated by go-bindata.
// sources:
// translate/templates/defs.gotmpl
// translate/templates/main.gotmpl
// DO NOT EDIT!

package translate

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _translateTemplatesDefsGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x50\xc1\x4e\xc3\x30\x0c\xbd\xe7\x2b\x7c\x04\x09\x75\xfc\x02\x02\xd6\x1b\x9b\xd8\xc4\x05\x71\xb0\x3a\xb7\xaa\x68\xdc\x2a\x4d\x0e\x95\xe5\x7f\x47\x4d\x02\xcd\xa4\x71\x8a\xed\xbc\xe7\xf7\x9e\x27\x6c\xbe\xb1\x23\xb0\xd8\xb3\x31\x22\x0e\xb9\x23\xa8\xce\xcb\x44\xb3\xaa\xf1\xcb\x44\x20\x52\xd5\xe3\xc9\xbb\xd0\xf8\x37\xb4\xa4\x0a\x73\x6c\x40\x36\x42\x4d\x7e\xdf\xd3\x70\x99\x55\x13\x3e\x23\x45\xfa\x16\x98\xe0\x11\xaa\x27\xe7\x70\x79\x1e\x03\x7b\xd5\x4f\x91\xab\xfe\x4b\x84\xf8\xa2\x5a\xc0\x8f\x63\xcf\x9e\x5c\x06\x88\x44\x4f\x55\x3d\x46\xda\x5a\x27\x05\x11\x1a\x66\x2a\x01\xa5\xd3\xbc\xd6\xfc\xbe\x5b\xb5\x59\xdf\x07\x6e\xd6\xac\xa6\x0d\xdc\x5c\x99\xbf\x2b\xe3\x1d\xd1\xa1\xcd\xf1\x4e\xd8\xd2\x5f\xc0\xe8\xa9\x5b\xc5\x55\x1f\xf2\xfa\xfb\x14\x7c\xe5\xbd\x93\x0f\x8e\xd3\x77\x44\x97\xa3\x5b\x9e\x21\xef\x00\x31\x00\x00\xbb\x1d\x9c\x0f\x2f\x07\xe8\xed\x34\x90\x25\xf6\xa5\xc5\x9b\x2a\x91\xe6\xe2\xe0\x1f\xc1\x57\x3b\xf9\xe5\x03\x87\x50\x9c\x28\x9e\x24\x95\x3f\x01\x00\x00\xff\xff\x75\x30\xb0\x84\x15\x02\x00\x00")

func translateTemplatesDefsGotmplBytes() ([]byte, error) {
	return bindataRead(
		_translateTemplatesDefsGotmpl,
		"translate/templates/defs.gotmpl",
	)
}

func translateTemplatesDefsGotmpl() (*asset, error) {
	bytes, err := translateTemplatesDefsGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "translate/templates/defs.gotmpl", size: 533, mode: os.FileMode(436), modTime: time.Unix(1541497838, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _translateTemplatesMainGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x4d\x6f\xe3\x36\x10\x3d\x9b\xbf\x62\xea\x43\x21\x39\x1b\x65\x7b\x4d\xea\x43\x6a\x20\xb9\x2d\x16\xeb\x45\x7b\x08\x72\x20\xe4\x91\x41\xc4\x26\x5d\x8a\xce\x36\x25\xf8\xdf\x0b\x7e\x8a\x92\xa9\x2c\xba\x40\x9b\x4b\x14\x72\x38\xe4\xbc\xf7\xe6\x91\x39\xd1\xf6\x85\xee\x11\x8e\x94\x71\x42\x6e\x56\x44\x6b\x49\xf9\x1e\xa1\xf9\xfa\x76\xc2\xde\x18\xa2\x35\xeb\x80\x23\x2c\x97\x7e\xec\x13\x3d\x22\x5c\x1b\x03\xea\xed\x84\x3b\xec\x40\x6b\xe4\x3b\x37\xd2\x2b\x79\x6e\x15\x68\xdd\xd8\x20\x63\x40\x0f\xe9\x1e\x51\x3d\x30\x3c\xec\x7a\x63\x00\x5c\xce\xe6\x0f\xda\xff\x2e\xd8\xee\xb3\x60\x5c\xa1\x34\xe6\x55\xb0\x1d\xac\xb4\xc6\x43\x8f\xc6\x68\xed\xb6\x6b\x36\x94\x0b\xce\x5a\x7a\x88\x39\x75\x13\x56\xf4\x36\x08\xf9\xce\xc5\xfa\xd9\x78\xd8\x8f\xd0\xdc\x4b\x49\xdf\x36\xe2\xcc\x95\x31\x4f\x5a\x8f\xfe\x7e\x0e\xeb\xee\x48\xf8\x70\x69\x63\x75\xd9\x38\x59\xdd\x10\x76\x3c\x09\xa9\x60\xb9\x59\x12\xad\xaf\xc1\x9e\x3c\x1c\x20\x42\x14\x23\xce\xbc\xa7\x1d\x2e\xd3\xe2\xa1\xfa\xc9\x02\x0b\x9d\xdd\xf1\x51\xb8\x53\x0d\x1b\x27\x08\xc9\xa2\xdd\x51\x45\xc1\xe2\xd1\x6c\xf6\x62\xeb\xc6\x7d\x10\x59\xec\x85\x9b\x7c\x7a\x76\x39\x46\x73\x86\x90\xee\xcc\x5b\xa8\xa8\x5b\x7a\xb1\x43\x0d\xdb\x03\x6b\xb1\x3a\x20\x07\xc6\x55\x5d\x4a\x62\xb7\x67\x1d\xd0\x26\xec\xf3\xd3\x1a\x38\x3b\xd8\xd1\x85\x44\x75\x96\x3c\x4d\x91\x85\x21\x64\x91\x02\xd7\x70\xa4\x2f\x58\x15\x52\x7e\x80\x03\xf2\x9a\x2c\x3a\x21\x81\xc1\xed\x1a\x3e\xde\x01\x83\x5f\xed\xe8\x1d\xb0\xab\x2b\x97\x3c\xe6\x79\x62\xcf\xb0\xb6\xf8\x6c\x04\x7f\x45\xd9\x33\xc1\x1f\xce\xbc\x55\x4c\x70\x63\xaa\x55\x55\xc0\xa4\xae\x3c\xf8\x11\xe9\xea\xcc\xb8\x3a\x29\x39\x1d\xa6\x8d\xc3\xb5\xae\xe1\x0a\x62\x08\xab\x57\x21\x6a\xcb\xfe\x46\xd1\x55\xab\x14\x55\xd7\xbe\xc2\x69\xd9\x86\x7c\x17\xe6\x6f\x92\x29\xfc\x8d\xb6\x2f\x55\x6d\x8b\x4b\x85\x7b\x45\x24\xc8\x6c\xdd\xff\x6b\x45\x1e\xd9\x2f\x45\x68\x33\x02\x5c\xe1\xa6\x20\xe5\xa8\x61\x5f\x7f\xeb\xd2\xa8\xaf\xe2\x82\xf1\xaa\x87\x42\x51\x50\x12\x1b\x00\x40\x40\x78\x6e\xda\xfe\x94\xbc\xc4\xc5\xfb\xc8\x5b\x6f\x2b\xf8\x27\xfc\x92\x1a\x2e\xf4\x7b\xf4\x92\x0b\x9a\xb4\x43\xe5\x76\xc6\x90\x1c\x2d\xde\x84\xa6\xdc\x04\x5c\xfa\x46\xeb\x66\x4b\x3b\xcc\xec\xe7\x22\x4d\x1d\x4d\x26\xb3\x36\x77\x8e\xfb\x6f\x54\xe2\x40\x84\xc5\x6c\x9c\x2f\xae\xfc\x90\x61\xe0\xf9\xb0\xdf\xef\xf0\xf3\x09\x71\xc7\xf8\x3e\xcf\x3d\x26\xec\x41\x8a\xe3\x0c\x65\x8f\x97\x8c\x4d\xca\x0f\x9c\x94\xf9\x48\x06\x3c\xa6\xc0\x55\x16\xa9\x6a\xb2\xe6\x20\x59\x59\xe9\x2a\x99\x48\xa2\xbc\xff\x3b\x9a\x18\x20\x0c\xdc\x96\x8e\x54\x66\x6b\xd2\x5e\x39\xd1\xe9\xf8\x4e\x35\xef\x93\x3d\xbd\xc6\xca\x0d\x37\x4a\xfb\x23\x6c\x27\x3d\x97\x5b\x32\xa8\x3e\x07\xcf\xad\x98\xdc\x87\xd6\xc6\x0a\x77\x64\x59\xfb\x50\x49\xec\xe7\xc3\x2f\xe4\xe3\x4e\x3f\xb5\xbf\x8c\x42\x89\x7d\x32\x7c\xbf\x61\xd1\x9a\x9c\x27\x79\x20\x06\x71\x14\x31\xb1\xab\x1c\x1c\x37\x37\xf8\x97\xbb\x99\xd3\xfb\xc0\x23\x34\x3c\x50\xaa\x5c\x3f\x9f\xa9\xa4\xc7\xde\xbf\x05\x06\x01\xcd\x78\xc3\x58\x26\x19\xdb\xf9\xe3\xa4\x08\x60\x64\x39\xfc\xae\xc3\x06\x8f\xa8\xbe\xb8\x9a\xec\x1a\x7f\x88\xd1\x50\x31\x57\x54\x48\xea\xc8\x6b\xb8\xac\x67\xd6\x16\xdd\x9a\x57\x2a\xdd\x9b\xca\x06\xdf\xf7\xf7\x72\x6f\x0c\xac\x66\x0d\xd3\x2d\x61\xdd\x04\xa2\xf4\x40\x18\x84\x3b\x4e\xb8\x86\x9f\xff\x33\x0f\xfe\x37\x0e\x1c\x04\x74\xe1\x39\x61\x26\xbe\xef\x26\x5c\x58\xbd\xdf\xae\x07\xac\x87\x96\x9d\xd5\x4f\x5e\x7d\x62\xba\x48\xf4\x0f\x13\x37\xd9\x25\xf7\xd4\x42\x69\xd9\xfd\xfa\x5d\x55\xd9\x06\xaf\x93\xf9\xb8\xd6\x0a\x3d\xe6\xda\xc7\xfe\xaf\x60\x1f\x35\xe6\x9f\x00\x00\x00\xff\xff\x38\x52\x85\x96\x3d\x0c\x00\x00")

func translateTemplatesMainGotmplBytes() ([]byte, error) {
	return bindataRead(
		_translateTemplatesMainGotmpl,
		"translate/templates/main.gotmpl",
	)
}

func translateTemplatesMainGotmpl() (*asset, error) {
	bytes, err := translateTemplatesMainGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "translate/templates/main.gotmpl", size: 3133, mode: os.FileMode(436), modTime: time.Unix(1541675010, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"translate/templates/defs.gotmpl": translateTemplatesDefsGotmpl,
	"translate/templates/main.gotmpl": translateTemplatesMainGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"translate": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"defs.gotmpl": &bintree{translateTemplatesDefsGotmpl, map[string]*bintree{}},
			"main.gotmpl": &bintree{translateTemplatesMainGotmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

