// Code generated by go-bindata.
// sources:
// translate/templates/defs.gotmpl
// translate/templates/main.gotmpl
// DO NOT EDIT!

package translate

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _translateTemplatesDefsGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x50\xc1\x4e\xc3\x30\x0c\xbd\xe7\x2b\x7c\x04\x09\x75\xfc\x02\x02\xd6\x1b\x9b\xd8\xc4\x05\x71\xb0\x3a\xb7\xaa\x68\xdc\x2a\x4d\x0e\x95\xe5\x7f\x47\x4d\x02\xcd\xa4\x71\x8a\xed\xbc\xe7\xf7\x9e\x27\x6c\xbe\xb1\x23\xb0\xd8\xb3\x31\x22\x0e\xb9\x23\xa8\xce\xcb\x44\xb3\xaa\xf1\xcb\x44\x20\x52\xd5\xe3\xc9\xbb\xd0\xf8\x37\xb4\xa4\x0a\x73\x6c\x40\x36\x42\x4d\x7e\xdf\xd3\x70\x99\x55\x13\x3e\x23\x45\xfa\x16\x98\xe0\x11\xaa\x27\xe7\x70\x79\x1e\x03\x7b\xd5\x4f\x91\xab\xfe\x4b\x84\xf8\xa2\x5a\xc0\x8f\x63\xcf\x9e\x5c\x06\x88\x44\x4f\x55\x3d\x46\xda\x5a\x27\x05\x11\x1a\x66\x2a\x01\xa5\xd3\xbc\xd6\xfc\xbe\x5b\xb5\x59\xdf\x07\x6e\xd6\xac\xa6\x0d\xdc\x5c\x99\xbf\x2b\xe3\x1d\xd1\xa1\xcd\xf1\x4e\xd8\xd2\x5f\xc0\xe8\xa9\x5b\xc5\x55\x1f\xf2\xfa\xfb\x14\x7c\xe5\xbd\x93\x0f\x8e\xd3\x77\x44\x97\xa3\x5b\x9e\x21\xef\x00\x31\x00\x00\xbb\x1d\x9c\x0f\x2f\x07\xe8\xed\x34\x90\x25\xf6\xa5\xc5\x9b\x2a\x91\xe6\xe2\xe0\x1f\xc1\x57\x3b\xf9\xe5\x03\x87\x50\x9c\x28\x9e\x24\x95\x3f\x01\x00\x00\xff\xff\x75\x30\xb0\x84\x15\x02\x00\x00")

func translateTemplatesDefsGotmplBytes() ([]byte, error) {
	return bindataRead(
		_translateTemplatesDefsGotmpl,
		"translate/templates/defs.gotmpl",
	)
}

func translateTemplatesDefsGotmpl() (*asset, error) {
	bytes, err := translateTemplatesDefsGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "translate/templates/defs.gotmpl", size: 533, mode: os.FileMode(436), modTime: time.Unix(1541675354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _translateTemplatesMainGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x4d\x6f\xe3\x36\x10\x3d\x9b\xbf\x62\xea\x43\x21\x39\x1b\x65\x7b\x4d\xea\x43\xea\x22\xbe\x2d\x16\xeb\x45\x7b\x08\x72\x20\xe4\x91\x41\xc4\x26\x5d\x8a\xce\x36\x25\xf8\xdf\x0b\x7e\x8a\x92\xe9\x2c\x1a\xa0\x9b\x4b\x14\x72\x38\xe4\xbc\xf7\xe6\x91\x39\xd2\xf6\x99\xee\x10\x0e\x94\x71\x42\x6e\x16\x44\x6b\x49\xf9\x0e\xa1\xf9\xfa\x7a\xc4\xde\x18\xa2\x35\xeb\x80\x23\xcc\xe7\x7e\xec\x13\x3d\x20\x5c\x1b\x03\xea\xf5\x88\x5b\xec\x40\x6b\xe4\x5b\x37\xd2\x2b\x79\x6a\x15\x68\xdd\xd8\x20\x63\x40\x0f\xe9\xd6\xa8\x1e\x18\xee\xb7\xbd\x31\x00\x2e\x67\xf3\x27\xed\xff\x10\x6c\xfb\x59\x30\xae\x50\x1a\xf3\x22\xd8\x16\x16\x5a\xe3\xbe\x47\x63\xb4\x76\xdb\x35\x2b\xca\x05\x67\x2d\xdd\xc7\x9c\xba\x09\x2b\x7a\x1b\x84\x7c\xeb\x62\xfd\x6c\x3c\xec\x47\x68\xee\xa5\xa4\xaf\x2b\x71\xe2\xca\x98\x47\xad\x47\x7f\x3f\x85\x75\x77\x24\x7c\xb8\xb4\xb1\xba\x6c\x9c\x2c\x6e\x08\x3b\x1c\x85\x54\x30\x5f\xcd\x89\xd6\xd7\x60\x4f\x1e\x0e\x10\x21\x8a\x11\x27\xde\xd3\x0e\xe7\x69\xf1\x50\xfd\x64\x81\x85\xce\xee\xb8\x16\xee\x54\xc3\xc6\x09\x42\x32\x6b\xb7\x54\x51\xb0\x78\x34\xab\x9d\xd8\xb8\x71\x1f\x44\x66\x3b\xe1\x26\x1f\x9f\x5c\x8e\xd1\x9c\x21\xa4\x3b\xf1\x16\x2a\xea\x96\x9e\xed\x50\xc3\x66\xcf\x5a\xac\xf6\xc8\x81\x71\x55\x97\x92\xd8\xed\x59\x07\xb4\x09\xfb\xfc\xb4\x04\xce\xf6\x76\x74\x26\x51\x9d\x24\x4f\x53\x64\x66\x08\x99\xa5\xc0\x25\x1c\xe8\x33\x56\x85\x94\x1f\x60\x8f\xbc\x26\xb3\x4e\x48\x60\x70\xbb\x84\x8f\x77\xc0\xe0\x57\x3b\x7a\x07\xec\xea\xca\x25\x8f\x79\x1e\xd9\x13\x2c\x2d\x3e\x2b\xc1\x5f\x50\xf6\x4c\xf0\x87\x13\x6f\x15\x13\xdc\x98\x6a\x51\x15\x30\xa9\x2b\x0f\x7e\x44\xba\x3a\x31\xae\x8e\x4a\x4e\x87\x69\xe3\x70\xad\x6b\xb8\x82\x18\xc2\xea\x45\x88\xda\xb0\x7f\x50\x74\xd5\x22\x45\xd5\xb5\xaf\x70\x5a\xb6\x21\xdf\x85\xf9\x9b\x64\x0a\x7f\xa3\xed\x73\x55\xdb\xe2\x52\xe1\x5e\x11\x09\x32\x5b\xf7\x0f\xad\xc8\x23\xfb\xa5\x08\x6d\x46\x80\x2b\xdc\x14\xa4\x1c\x35\xec\xeb\x6f\x5d\x1a\xf5\x55\x9c\x31\x5e\xf5\x50\x28\x0a\x4a\x62\x03\x00\x08\x08\x5f\x9a\xb6\x3f\x25\x2f\x71\xf1\x3e\xf2\xd6\xdb\x0a\xfe\x05\xbf\xa4\x86\x0b\xfd\x1e\xbd\xe4\x8c\x26\xed\x50\xb9\xbd\x60\x48\x8e\x16\x6f\x42\x53\x6e\x02\x2e\x7d\xa3\x75\xb3\xa1\x1d\x66\xf6\x73\x96\xa6\x8e\x26\x93\x59\x9b\x3b\xc7\xfd\x37\x2a\x71\x20\xc2\x62\x36\xce\x17\x57\x7e\xc8\x30\xf0\x7c\xd8\xef\x37\xf8\xf9\x84\xb8\x65\x7c\x97\xe7\x1e\x13\xf6\x20\xc5\xe1\x02\x65\xeb\x73\xc6\x26\xe5\x07\x4e\xca\x7c\x24\x03\x1e\x53\xe0\x2a\x8b\x54\x35\x59\x73\x90\xac\xac\x74\x95\x4c\x24\x51\xde\xff\x0d\x4d\x0c\x10\x06\x6e\x4b\x47\x2a\xb3\x35\x69\xaf\x9c\xe8\x74\x7c\xa7\x9a\xb7\xc9\xf6\x5c\x43\xf1\x3a\x8a\xfc\xff\x8e\xed\x9e\x4a\x6a\x9b\x6f\xa3\x24\xe3\xbb\x91\x44\x9c\xf0\xca\x7d\x3a\x3a\xcd\x7b\x44\x92\xda\xa0\xdc\xc9\xa1\x59\x72\xcc\xdd\x8a\xc9\x35\x6a\xdd\xaf\x70\xb5\x96\x5b\x06\x2a\x89\xfd\xe5\xf0\x33\xd5\xb9\xd3\x4f\x5d\x33\x63\x5e\x62\x9f\xee\x09\xbf\x61\xd1\xd1\x9c\x95\x79\x20\x06\x4d\x15\x31\xb1\xab\x1c\x1c\x37\x37\xf8\xb7\xbb\xd0\xd3\xb3\xc2\x23\x34\xbc\x6b\xaa\x5c\x76\x9f\xa9\xa4\x87\xde\x3f\x21\x06\xdd\x5d\xb0\x94\xb1\xba\x32\xb6\xf3\x37\x4d\x11\xc0\xc8\x72\xf8\x5d\x87\x0d\xd6\xa8\xbe\xb8\x9a\xec\x1a\x7f\x88\xd1\x50\x31\x57\x54\x48\x6a\xe4\x6b\x38\xaf\xe7\xa2\x9b\xba\x35\x2f\x54\xba\xa7\x98\x0d\xbe\xef\xef\xe5\xce\x18\x58\x5c\xf4\x59\xb7\x84\x75\x13\x88\xd2\xbb\x62\x10\xee\x38\xe1\x12\x7e\xfe\xdf\xac\xfb\xbf\x18\x77\x10\xd0\x99\x55\x85\x99\xf8\x2c\x9c\x70\x61\xf5\x7e\xbb\x1c\xb0\x1e\x5a\xf6\xa2\x7e\xf2\xea\x13\xd3\x45\xa2\xdf\x4d\xdc\x64\x97\xdc\x8a\x0b\xa5\x65\xd7\xf2\x77\x55\x65\x1b\xbc\x4e\xe6\xe3\x5a\x2b\xf4\x98\x6b\x1f\xfb\x2f\x86\x7d\x0b\x99\x7f\x03\x00\x00\xff\xff\x70\x72\xed\xa3\x74\x0c\x00\x00")

func translateTemplatesMainGotmplBytes() ([]byte, error) {
	return bindataRead(
		_translateTemplatesMainGotmpl,
		"translate/templates/main.gotmpl",
	)
}

func translateTemplatesMainGotmpl() (*asset, error) {
	bytes, err := translateTemplatesMainGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "translate/templates/main.gotmpl", size: 3188, mode: os.FileMode(436), modTime: time.Unix(1541678063, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"translate/templates/defs.gotmpl": translateTemplatesDefsGotmpl,
	"translate/templates/main.gotmpl": translateTemplatesMainGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"translate": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"defs.gotmpl": &bintree{translateTemplatesDefsGotmpl, map[string]*bintree{}},
			"main.gotmpl": &bintree{translateTemplatesMainGotmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

